require 'spec'
require 'lib/masstransit'

class Person
    attr_accessor :name
end
class Company
    attr_accessor :name
    attr_accessor :boss
end

describe "serializer" do
    it "should serialize random objects" do
        bob = Person.new
        bob.name = 'bob'
        s = MassTransit::Serializer.new
        output = s.serialize(bob)
        output.should eql "{\"name\":\"bob\"}"
    end
    
    it "should serialize nested objects" do
        company = Company.new
        company.name = 'Acme'
        company.boss = Person.new
        company.boss.name = 'bob'
        s = MassTransit::Serializer.new
        output = s.serialize(company)
        output.should eql "{\"name\":\"Acme\",\"boss\":{\"name\":\"bob\"}}"
    end
    
    it "should go to UntypedMessage" do
        input = "{\"name\":\"Acme\",\"boss\":{\"name\":\"bob\"}}"
        s = MassTransit::Serializer.new
        output = s.deserialize(input)
        output.class.should eql MassTransit::Message
    end
    
	it 'should handle envelopes' do
		p = Person.new
		p.name = 'ruby'
		
		env = MassTransit::Envelope.new
		env.message_name = 'Person'
		env.body = p
		
		s = MassTransit::Serializer.new
		data = s.serialize env
		data.should eql "{\"body\":{\"name\":\"ruby\"},\"message_name\":\"Person\"}"
		
		vne = s.deserialize data

		vne.message_name.should eql 'Person'

	end
end